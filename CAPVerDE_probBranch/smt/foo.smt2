( set-option :produce-models true )
( set-option :produce-unsat-cores true )
( declare-sort Equation 0 )
( declare-fun hasSTall (Int) Bool )
( declare-fun hasSTone (Int) Bool )
( declare-fun hasSTnone (Int) Bool )
( declare-fun kST (Equation) Bool )
( declare-fun bST (Equation) Bool )
( declare-fun notSharedST (Int) Bool )
( declare-fun notStoredST (Int) Bool )
( declare-fun hasSVRall (Int) Bool )
( declare-fun hasSVRone (Int) Bool )
( declare-fun hasSVRnone (Int) Bool )
( declare-fun kSVR (Equation) Bool )
( declare-fun bSVR (Equation) Bool )
( declare-fun notSharedSVR (Int) Bool )
( declare-fun notStoredSVR (Int) Bool )
( declare-fun hasTRall (Int) Bool )
( declare-fun hasTRone (Int) Bool )
( declare-fun hasTRnone (Int) Bool )
( declare-fun kTR (Equation) Bool )
( declare-fun bTR (Equation) Bool )
( declare-fun notSharedTR (Int) Bool )
( declare-fun notStoredTR (Int) Bool )
( declare-fun D () Int )
( declare-fun e () Int )
( declare-fun b () Int )
( declare-fun bID () Int )
( declare-fun sID () Int )
( declare-fun d () Int )
( declare-fun rID () Int )
( declare-fun sbID () Int )
( declare-fun bID_blindRIDBE () Equation )
( declare-fun sID_unblindSbIDB () Equation )
( declare-fun sID_signDrID () Equation )
( declare-fun sbID_signDbID () Equation )
( assert (! (and (hasSTall D) (hasSTall e) (hasSTall b) (hasSTall bID) (hasSTall sID) (not (hasSTall d)) (hasSTall rID) (hasSTall sbID)) :named HAST) )
( assert (! (and (not (hasSTone D)) (not (hasSTone e)) (not (hasSTone b)) (not (hasSTone bID)) (not (hasSTone sID)) (hasSTone d) (not (hasSTone rID)) (not (hasSTone sbID))) :named HOST) )
( assert (! (and (not (hasSTnone D)) (not (hasSTnone e)) (not (hasSTnone b)) (not (hasSTnone bID)) (not (hasSTnone sID)) (hasSTnone d) (not (hasSTnone rID)) (not (hasSTnone sbID))) :named HNST) )
( assert (! (and (kST bID_blindRIDBE) (kST sID_unblindSbIDB) (not (kST sID_signDrID)) (not (kST sbID_signDbID))) :named KST) )
( assert (! (and (bST bID_blindRIDBE) (bST sID_unblindSbIDB) (not (bST sID_signDrID)) (not (bST sbID_signDbID))) :named BST) )
( assert (! (and (notSharedST D) (notSharedST e) (notSharedST b) (notSharedST bID) (notSharedST sID) (notSharedST d) (not (notSharedST rID)) (notSharedST sbID)) :named SHST) )
( assert (! (and (notStoredST D) (notStoredST e) (notStoredST b) (notStoredST bID) (notStoredST sID) (notStoredST d) (not (notStoredST rID)) (not (notStoredST sbID))) :named STST) )
( assert (! (and (hasSVRall D) (hasSVRall e) (not (hasSVRall b)) (hasSVRall bID) (hasSVRall sID) (hasSVRall d) (hasSVRall rID) (hasSVRall sbID)) :named HASVR) )
( assert (! (and (not (hasSVRone D)) (not (hasSVRone e)) (hasSVRone b) (not (hasSVRone bID)) (not (hasSVRone sID)) (not (hasSVRone d)) (not (hasSVRone rID)) (not (hasSVRone sbID))) :named HOSVR) )
( assert (! (and (not (hasSVRnone D)) (not (hasSVRnone e)) (hasSVRnone b) (not (hasSVRnone bID)) (not (hasSVRnone sID)) (not (hasSVRnone d)) (not (hasSVRnone rID)) (not (hasSVRnone sbID))) :named HNSVR) )
( assert (! (and (not (kSVR bID_blindRIDBE)) (not (kSVR sID_unblindSbIDB)) (kSVR sID_signDrID) (not (kSVR sbID_signDbID))) :named KSVR) )
( assert (! (and (not (bSVR bID_blindRIDBE)) (not (bSVR sID_unblindSbIDB)) (bSVR sID_signDrID) (not (bSVR sbID_signDbID))) :named BSVR) )
( assert (! (and (not (notSharedSVR D)) (notSharedSVR e) (notSharedSVR b) (not (notSharedSVR bID)) (notSharedSVR sID) (notSharedSVR d) (not (notSharedSVR rID)) (not (notSharedSVR sbID))) :named SHSVR) )
( assert (! (and (not (notStoredSVR D)) (notStoredSVR e) (notStoredSVR b) (not (notStoredSVR bID)) (not (notStoredSVR sID)) (notStoredSVR d) (not (notStoredSVR rID)) (not (notStoredSVR sbID))) :named STSVR) )
( assert (! (and (hasTRall D) (hasTRall e) (not (hasTRall b)) (hasTRall bID) (not (hasTRall sID)) (hasTRall d) (not (hasTRall rID)) (hasTRall sbID)) :named HATR) )
( assert (! (and (not (hasTRone D)) (not (hasTRone e)) (hasTRone b) (not (hasTRone bID)) (hasTRone sID) (not (hasTRone d)) (hasTRone rID) (not (hasTRone sbID))) :named HOTR) )
( assert (! (and (not (hasTRnone D)) (not (hasTRnone e)) (hasTRnone b) (not (hasTRnone bID)) (hasTRnone sID) (not (hasTRnone d)) (hasTRnone rID) (not (hasTRnone sbID))) :named HNTR) )
( assert (! (and (not (kTR bID_blindRIDBE)) (not (kTR sID_unblindSbIDB)) (not (kTR sID_signDrID)) (kTR sbID_signDbID)) :named KTR) )
( assert (! (and (not (bTR bID_blindRIDBE)) (not (bTR sID_unblindSbIDB)) (not (bTR sID_signDrID)) (bTR sbID_signDbID)) :named BTR) )
( assert (! (and (notSharedTR D) (notSharedTR e) (notSharedTR b) (notSharedTR bID) (notSharedTR sID) (notSharedTR d) (notSharedTR rID) (notSharedTR sbID)) :named SHTR) )
( assert (! (and (not (notStoredTR D)) (notStoredTR e) (notStoredTR b) (not (notStoredTR bID)) (notStoredTR sID) (notStoredTR d) (notStoredTR rID) (notStoredTR sbID)) :named STTR) )
( push 1 )
( assert (! (notSharedSVR bID) :named PROP1) )
( check-sat )
( get-unsat-core )
